name: Rotate OpenRouter API Key

# Schedule: Run monthly on the 1st at 2 AM UTC
on:
  schedule:
    - cron: '0 2 1 * *'  # Monthly at 2 AM UTC on the 1st
  workflow_dispatch:  # Allow manual trigger
    inputs:
      delete_old_keys:
        description: 'Delete old keys after rotation (default: true)'
        required: false
        default: true
        type: boolean
      skip_cleanup:
        description: 'Skip cleanup of old keys (override default behavior)'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - '.github/workflows/rotate-openrouter-key.yml'
      - 'scripts/openrouter-key-manager.js'

jobs:
  rotate-key:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Configure Vercel
        run: |
          echo "Installing Vercel..."
          vercel --version
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Rotate from pre-provisioned key pool (preferred)
        if: ${{ secrets.OPENROUTER_KEY_POOL }}
        env:
          KEY_POOL: ${{ secrets.OPENROUTER_KEY_POOL }}
          ACTIVE_INDEX: ${{ secrets.OPENROUTER_ACTIVE_INDEX }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          set -euo pipefail
          echo "üîë Rotating using pre-provisioned key pool"
          echo "$KEY_POOL" | jq . >/dev/null 2>&1 || { echo "‚ùå OPENROUTER_KEY_POOL is not valid JSON"; exit 1; }
          TOTAL=$(echo "$KEY_POOL" | jq 'length')
          if [ "$TOTAL" -lt 1 ]; then echo "‚ùå Key pool is empty"; exit 1; fi
          IDX=${ACTIVE_INDEX:-"-1"}
          if ! [[ "$IDX" =~ ^-?[0-9]+$ ]]; then IDX=-1; fi
          NEXT=$(( (IDX + 1) % TOTAL ))
          NEW_KEY=$(echo "$KEY_POOL" | jq -r ".[$NEXT]")
          if [ -z "$NEW_KEY" ] || [ "$NEW_KEY" = "null" ]; then echo "‚ùå Selected key is empty"; exit 1; fi
          echo "‚û°Ô∏è  Selecting key index $NEXT of $TOTAL"

          echo "üîê Updating GitHub secrets"
          gh secret set OPENROUTER_API_KEY --body "$NEW_KEY"
          gh secret set OPENROUTER_ACTIVE_INDEX --body "$NEXT"

          echo "üîê Syncing key to Vercel project env"
          vercel env rm OPENROUTER_API_KEY production --token="$VERCEL_TOKEN" --yes || true
          echo "$NEW_KEY" | vercel env add OPENROUTER_API_KEY production --token="$VERCEL_TOKEN"

          echo "‚úÖ Key rotated to pool index $NEXT"

      - name: Authenticate GitHub CLI
        if: ${{ !secrets.OPENROUTER_KEY_POOL && secrets.OPENROUTER_PROVISIONING_KEY }}
        run: |
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
          gh auth status

      - name: Rotate via OpenRouter provisioning API (fallback)
        if: ${{ !secrets.OPENROUTER_KEY_POOL && secrets.OPENROUTER_PROVISIONING_KEY }}
        env:
          OPENROUTER_PROVISIONING_KEY: ${{ secrets.OPENROUTER_PROVISIONING_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -euxo pipefail
          
          # Create new key
          echo "üîë Creating new OpenRouter API key..."
          RESPONSE=$(curl -sS -X POST https://openrouter.ai/api/v1/keys \
            -H "Authorization: Bearer $OPENROUTER_PROVISIONING_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"Formul8-Auto-$(date +%Y%m%d-%H%M%S)\"}")
          
          NEW_KEY=$(echo "$RESPONSE" | jq -r '.key')
          if [ -z "$NEW_KEY" ] || [ "$NEW_KEY" = "null" ]; then
            echo "‚ùå Failed to create key"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Key created: ${NEW_KEY:0:20}..."
          
          # Update GitHub secret
          echo "üîê Updating GitHub secret..."
          echo "$NEW_KEY" | gh secret set OPENROUTER_API_KEY
          echo "‚úÖ GitHub secret updated"
          
          # Update Vercel
          echo "üîê Updating Vercel environment..."
          vercel env rm OPENROUTER_API_KEY production --token="$VERCEL_TOKEN" --yes || true
          echo "$NEW_KEY" | vercel env add OPENROUTER_API_KEY production --token="$VERCEL_TOKEN"
          echo "‚úÖ Vercel environment updated"
          
          echo "‚úÖ Rotation complete!"
      
      - name: Upload rotation log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rotation-log-${{ github.run_number }}
          path: logs/
          retention-days: 90
      
      - name: Verify API responds (smoke test)
        run: |
          echo "üîç Hitting API smoke test..."
          curl -sS -X POST https://chat.formul8.ai/api/chat -H 'Content-Type: application/json' --data '{"message":"ping"}' | head -c 400 || true
      
      - name: Trigger Chat Deployment
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üöÄ Triggering chat deployment with current key...');
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-chat.yml',
              ref: 'main'
            });
            console.log('‚úÖ Chat deployment triggered successfully')
      
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Key rotation completed successfully!"
          echo "üîÑ New key set and synced to Vercel"
          echo "üîí Security rotation completed safely"
          # Add your notification logic here (Slack, Discord, email, etc.)
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Key rotation failed! Check the logs."
          echo "‚ö†Ô∏è  Old keys may still be active - manual intervention required"
          # Add your notification logic here (Slack, Discord, email, etc.)



